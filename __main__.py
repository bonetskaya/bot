import config
from copy import deepcopy
from random import shuffle
import telebot

NOTHING = 0
SEND_POEMS = 1
MAY_START_VOTING = 2
VOTING = 3


class GameLogicError(RuntimeError):
    pass


class Game:
    def __init__(self):
        self._players = {}
        self._admin = None
        self._status = NOTHING
        self._start_poem = None
        self._right_answer = None
        self._custom_answers = {}
        self._shuffled_answers = None
        self._right_score = {}
        self._sympathy_score = {}
        self._voted = set()

    def add_player(self, username: str, chat_id: int):
        if self._status == NOTHING:
            self._players[username] = chat_id
        else:
            raise GameLogicError("–î–æ–∂–¥–∏—Å—å –∫–æ–Ω—Ü–∞ —Ç–µ–∫—É—â–µ–π –∏–≥—Ä—ã!")

    def is_player(self, username):
        return username in self._players

    def remove_player(self, username):
        if username == self._admin:
            GameLogicError("–°–Ω–∞—á–∞–ª–∞ –ø–µ—Ä–µ—Å—Ç–∞–Ω—å –±—ã—Ç—å –∞–¥–º–∏–Ω–æ–º!")
        if self._status == NOTHING:
            if username in self._players:
                self._players.pop(username)
        else:
            raise GameLogicError("–î–æ–∂–¥–∏—Å—å –∫–æ–Ω—Ü–∞ —Ç–µ–∫—É—â–µ–π –∏–≥—Ä—ã!")

    def set_admin(self, username):
        if self._admin is None:
            self._admin = username
        else:
            raise GameLogicError(f"–ê–¥–º–∏–Ω —É–∂–µ –µ—Å—Ç—å, —ç—Ç–æ {self._admin}")

    def is_admin(self, username):
        return self._admin == username

    def get_admin(self):
        return self._admin

    def get_admin_chat(self):
        return self._players[self._admin]

    def remove_admin(self):
        if self._status == NOTHING:
            self._admin = None
        elif self._status == VOTING:
            if len(self._voted) + 1 == len(self._players):
                self._admin = None
                self._status = NOTHING
                self._start_poem = None
                self._right_answer = None
                self._custom_answers = {}
                self._shuffled_answers = None
                self._voted = set()
                print(sorted(self._right_score.items(), key=lambda x: x[1]))
                print(sorted(self._sympathy_score.items(), key=lambda x: x[1]))
                print("____________________________________________")
            else:
                raise GameLogicError("–ù–µ –≤—Å–µ –µ—â—ë –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–∏!")
        else:
            raise GameLogicError("–î–æ–∂–¥–∏—Å—å –∫–æ–Ω—Ü–∞ —Ç–µ–∫—É—â–µ–π –∏–≥—Ä—ã!")

    def reset_game(self):
        if self._voted:
            raise GameLogicError("–ü—Ä–∏–¥—ë—Ç—Å—è –¥–æ–∏–≥—Ä–∞—Ç—å –∏–≥—Ä—É.")
        self._status = NOTHING
        self._start_poem = None
        self._right_answer = None
        self._custom_answers = {}
        self._shuffled_answers = None

    def get_status(self):
        return self._status

    def get_players_without_admin(self):
        players_without_admin = deepcopy(self._players)
        if self._admin is not None:
            players_without_admin.pop(self._admin)
            return players_without_admin
        return players_without_admin

    def set_start_poem(self, text: str):
        self._status = SEND_POEMS
        self._start_poem = text.strip().lower()

    def set_right_answer(self, text: str):
        self._right_answer = text.strip().lower()

    def add_answer(self, username: str, text: str):
        self._custom_answers[username] = text.strip().lower()
        return len(self._custom_answers) + 1 == len(self._players)

    def get_answers(self):
        if self._status == NOTHING:
            raise GameLogicError("–ò–≥—Ä–∞ –Ω–µ –Ω–∞—á–∞–ª–∞—Å—å.")
        if self._start_poem is None:
            raise GameLogicError("–ü–æ–∫–∞ –∞–¥–º–∏–Ω –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç...")
        if len(self._custom_answers) + 1 != len(self._players):
            raise GameLogicError("–ù–µ –≤—Å–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ —Å–≤–æ–∏ –æ—Ç–≤–µ—Ç—ã!")
        if self._shuffled_answers is None:
            self._shuffled_answers = [(user, "\n".join((self._start_poem, answer))) for user, answer in self._custom_answers.items()]
            print(self._shuffled_answers)
            self._shuffled_answers.append((None, "\n".join((self._start_poem, self._right_answer))))
            shuffle(self._shuffled_answers)
            if self._status == SEND_POEMS:
                self._status = MAY_START_VOTING
        return self._shuffled_answers

    def start_voting(self):
        if self._status == VOTING:
            raise GameLogicError("–ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ —É–∂–µ –∏–¥—ë—Ç")
        if self._status != MAY_START_VOTING:
            raise GameLogicError("–°–µ–π—á–∞—Å –Ω–µ–ª—å–∑—è –Ω–∞—á–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ.")
        if len(self._custom_answers) + 1 != len(self._players):
            raise GameLogicError("–ü–æ–∫–∞ –Ω–µ –≤—Å–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –æ—Ç–≤–µ—Ç—ã.")
        self._status = VOTING

    def get_result(self):
        return f"–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –æ—Ç–≤–µ—Ç–∞–º:\n{sorted(self._right_score.items(), key=lambda x: x[1])}\n" \
               f"–ü–æ —Å–∏–º–ø–∞—Ç–∏—è–º:\n{sorted(self._sympathy_score.items(), key=lambda x: x[1])}"

    def vote(self, username, right_number: int, sympathy_number: int):
        if self._status != VOTING:
            print(self._status)
            raise GameLogicError("–°–µ–π—á–∞—Å –Ω–µ —Ñ–∞–∑–∞ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è.")
        if self._admin == username:
            raise GameLogicError("–ê–¥–º–∏–Ω –Ω–µ –º–æ–∂–µ—Ç –≥–æ–ª–æ—Å–æ–≤–∞—Ç—å.")
        if not (0 < right_number <= len(self._shuffled_answers) and 0 < sympathy_number <= len(self._shuffled_answers)):
            raise GameLogicError("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞.")
        if username in self._voted:
            raise GameLogicError("–¢—ã —É–∂–µ –≥–æ–ª–æ—Å–æ–≤–∞–ª(–∞)")
        right_number -= 1
        sympathy_number -= 1
        if self._shuffled_answers[sympathy_number][0] == username:
            raise GameLogicError("–ó–∞ —Å–µ–±—è –≥–æ–ª–æ—Å–æ–≤–∞—Ç—å –Ω–µ—Ö–æ—Ä–æ—à–æ! -_-")
        self._right_score[username] = self._right_score.get(username, 0) + int(self._shuffled_answers[right_number][0] is None)
        sympathy_username = self._shuffled_answers[sympathy_number][0]
        self._sympathy_score[sympathy_username] = self._sympathy_score.get(sympathy_username, 0) + 1
        self._voted.add(username)
        self._sympathy_score[username] = self._sympathy_score.get(username, 0)
        return len(self._voted) + 1 == len(self._players)


bot = telebot.TeleBot(config.token)
game = Game()


def check(message):
    if not game.is_player(message.from_user.username):
        bot.send_message(message.chat.id, "–¢—ã –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—à—å –≤ –∏–≥—Ä–µ. –ß—Ç–æ–±—ã —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –∏–≥—Ä–µ, –æ—Ç–ø—Ä–∞–≤—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–º–∞–Ω–¥–æ–π /participate")
    return game.is_player(message.from_user.username)


def check_admin(message):
    if not game.is_admin(message.from_user.username):
        bot.send_message(message.chat.id, "–¢—ã –Ω–µ –∞–¥–º–∏–Ω")
    return game.is_admin(message.from_user.username)


@bot.message_handler(commands=["start"])
def start_message(message):
    bot.send_message(message.chat.id, """–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∑–∞–≤–∞–ª–∏–Ω–∫—É!
–ß—Ç–æ–±—ã —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –∏–≥—Ä–µ, –æ—Ç–ø—Ä–∞–≤—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–º–∞–Ω–¥–æ–π /participate
""")


@bot.message_handler(commands=["participate"])
def participate(message):
    try:
        game.add_player(message.from_user.username, message.chat.id)
        bot.send_message(message.chat.id, "–£—Ä–∞, —Ç—ã —É—á–∞—Å—Ç–≤—É–µ—à—å –≤ –∏–≥—Ä–µ! –ú–æ–∂–µ—à—å –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å—Ç–∞—Ç—å –∞–¥–º–∏–Ω–æ–º, –æ—Ç–ø—Ä–∞–≤–∏–≤ —Å–æ–æ–±—â–µ–Ω–∏–µ /admin")
    except GameLogicError as e:
        bot.send_message(message.chat.id, str(e))



@bot.message_handler(commands=["exit"])
def exit(message):
    try:
        game.remove_player(message.from_user.username)
        bot.send_message(message.chat.id, "–ü—Ä–æ—â–∞–π.")
    except GameLogicError as e:
        bot.send_message(message.chat.id, str(e))


@bot.message_handler(commands=["admin"])
def admin(message):
    if not check(message):
        return
    try:
        game.set_admin(message.from_user.username)
        bot.send_message(message.chat.id, """–¢–µ–ø–µ—Ä—å —Ç—ã –∞–¥–º–∏–Ω üòé
–û—Ç–ø—Ä–∞–≤—å –¥–≤–µ —Å—Ç—Ä–æ—á–∫–∏ —Å—Ç–∏—Ö–æ—Ç–≤–æ—Ä–µ–Ω–∏—è —Å–ª–µ–¥—É—é—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –∏–ª–∏ –Ω–∞–±–µ—Ä–∏ –∫–æ–º–∞–Ω–¥—É /not_admin, –µ—Å–ª–∏ —Ç—ã –±–æ–ª—å—à–µ –Ω–µ —Ö–æ—á–µ—à—å –±—ã—Ç—å –∞–¥–º–∏–Ω–æ–º.
–û—Å—Ç–æ—Ä–æ–∂–Ω–æ! –°–ª–µ–¥—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—Å—è –≤—Å–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º –∏–≥—Ä—ã. –ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ–π–¥—ë—Ç –Ω–µ —Ç–∞–∫, –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É /restart_session
""")
    except GameLogicError as e:
        bot.send_message(message.chat.id, str(e))


@bot.message_handler(commands=["not_admin"])
def not_admin(message):
    if not check_admin(message):
        return
    try:
        game.remove_admin()
        bot.send_message(message.chat.id, "–¢–µ–ø–µ—Ä—å —Ç—ã –Ω–µ –∞–¥–º–∏–Ω")
    except GameLogicError as e:
        bot.send_message(message.chat.id, str(e))


@bot.message_handler(commands=["restart_session"])
def restart_session(message):
    if not check_admin(message):
        return
    try:
        game.reset_game()
        bot.send_message(message.chat.id, "–¢—ã –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏–ª(–∞) –∏–≥—Ä—É. –í–≤–µ–¥–∏ –ø–µ—Ä–≤—ã–µ –¥–≤–µ —Å—Ç—Ä–æ—á–∫–∏ —Å—Ç–∏—Ö–æ—Ç–≤–æ—Ä–µ–Ω–∏—è –∏–ª–∏ –≤–≤–µ–¥–∏ /not_admin")
    except GameLogicError as e:
        bot.send_message(message.chat.id, str(e))


@bot.message_handler(commands=["admin_eto_who"])
def admin_eto_who(message):
    if not check(message):
        return
    if game.get_admin() is None:
        bot.send_message(message.chat.id, "–ê –∞–¥–º–∏–Ω–∞ –Ω–µ—Ç! –•–æ—á–µ—à—å –∏–º —Å—Ç–∞—Ç—å? –ù—É–∂–Ω–æ –≤—Å–µ–≥–æ –ª–∏—à—å –Ω–∞–ø–∏—Å–∞—Ç—å /admin")
    else:
        bot.send_message(message.chat.id, f"–°–µ–π—á–∞—Å –∞–¥–º–∏–Ω {message.from_user.username}.")


def get_answers():
    try:
        answers = game.get_answers()
        admin_message = "–í–æ—Ç, —á—Ç–æ –ø—Ä–∏—Å–ª–∞–ª–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∏. –ß—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Ç–∏—Ö–æ—Ç–≤–æ—Ä–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞–º –∏ –Ω–∞—á–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ, –æ—Ç–ø—Ä–∞–≤—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–º–∞–Ω–¥–æ–π /start_voting\n\n"
        for answer in answers:
            username = answer[0] if answer[0] is not None else "–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç"
            admin_message += f"(({username}))\n{answer[1]}\n\n"
        bot.send_message(game.get_admin_chat(), admin_message)
    except GameLogicError as e:
        bot.send_message(game.get_admin_chat(), str(e))


@bot.message_handler(commands=["start_voting"])
def start_voting(message):
    if not check_admin(message):
        return
    try:
        game.start_voting()
        answers = game.get_answers()
        others_message = "–¢–µ–ø–µ—Ä—å —Ç—ã –º–æ–∂–µ—à—å –≥–æ–ª–æ—Å–æ–≤–∞—Ç—å! –û—Ç–ø—Ä–∞–≤—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–≤—É–º—è —á–∏—Å–ª–∞–º–∏: –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–æ —Ç–≤–æ–µ–º—É –º–Ω–µ–Ω–∏—é –æ—Ç–≤–µ—Ç –∏ —Å–∞–º–æ–µ –ø–æ–Ω—Ä–∞–≤–∏–≤—à–µ–µ—Å—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ.\n\n"
        for i, answer in enumerate(answers):
            others_message += f"{i + 1}) \n{answer[1]}\n\n"
        for chat_id in game.get_players_without_admin().values():
            bot.send_message(chat_id, others_message)
        bot.send_message(message.chat.id, "–í—Å–µ –ø–æ–ª—É—á–∏–ª–∏ –æ—Ç–≤–µ—Ç—ã –∏ –º–æ–≥—É—Ç –≥–æ–ª–æ—Å–æ–≤–∞—Ç—å! –ö–æ–≥–¥–∞ –≤—Å–µ –ø—Ä–æ–≥–æ–ª–æ—Å—É—é—Ç, –ø–æ–ª—É—á–∏—à—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç :)")
    except GameLogicError as e:
        bot.send_message(message.chat.id, str(e))


@bot.message_handler(content_types=["text"])
def poems(message):
    if not check(message):
        return
    if game.is_admin(message.from_user.username):
        if game.get_status() == NOTHING:
            try:
                game.set_start_poem(message.text)
                for chat_id in game.get_players_without_admin().values():
                    bot.send_message(chat_id, "–¢–µ–±–µ –Ω–∞–¥–æ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —ç—Ç–æ —Å—Ç–∏—Ö–æ—Ç–≤–æ—Ä–µ–Ω–∏–µ. –°–ª–µ–¥—É—é—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –æ—Ç–ø—Ä–∞–≤—å –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ.\n\n" + message.text)
                bot.send_message(message.chat.id, "–ò–≥—Ä–æ–∫–∏ –ø–æ–ª—É—á–∏–ª–∏ —Ç–≤–æ—ë —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —É–∂–µ –ø—Ä–∏–¥—É–º—ã–≤–∞—é—Ç –æ—Ç–≤–µ—Ç—ã. –¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ!")
            except GameLogicError as e:
                bot.send_message(message.chat.id, str(e))
        elif game.get_status() == SEND_POEMS:
            try:
                game.set_right_answer(message.text)
                bot.send_message(message.chat.id, "–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –ø—Ä–∏–Ω—è—Ç. –ñ–¥—ë–º, –∫–æ–≥–¥–∞ –∏–≥—Ä–æ–∫–∏ –ø—Ä–∏–¥—É–º–∞—é—Ç –æ—Ç–≤–µ—Ç—ã!")
            except GameLogicError as e:
                bot.send_message(message.chat.id, str(e))
        else:
            bot.send_message(message.chat.id, "–°–µ–π—á–∞—Å –Ω–µ–ª—å–∑—è –ø—Ä–∏—Å—ã–ª–∞—Ç—å —Å—Ç–∏—Ö–æ—Ç–≤–æ—Ä–µ–Ω–∏—è.")
    else:
        if game.get_status() == SEND_POEMS:
            try:
                if game.add_answer(message.from_user.username, message.text):
                    get_answers()
                bot.send_message(message.chat.id, "–¢–≤–æ–π –æ—Ç–≤–µ—Ç –ø—Ä–∏–Ω—è—Ç!")
                return
            except GameLogicError as e:
                bot.send_message(message.chat.id, str(e))
        if game.get_status() == VOTING:
            try:
                right, sympathy = message.text.split()
                right_num, sympathy_num = int(right), int(sympathy)
            except:
                bot.send_message(message.chat.id, "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞. –í–≤–µ–¥–∏ –¥–≤–∞ —á–∏—Å–ª–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª.")
                return
            try:
                if game.vote(message.from_user.username, right_num, sympathy_num):
                    bot.send_message(game.get_admin_chat(), game.get_result())
                    game.remove_admin()
                bot.send_message(message.chat.id, "–¢–≤–æ–π –≥–æ–ª–æ—Å –ø—Ä–∏–Ω—è—Ç!")
            except GameLogicError as e:
                bot.send_message(message.chat.id, str(e))
        else:
            bot.send_message(message.chat.id, "–°–µ–π—á–∞—Å –Ω–µ–ª—å–∑—è –ø—Ä–∏—Å—ã–ª–∞—Ç—å —Å—Ç–∏—Ö–æ—Ç–≤–æ—Ä–µ–Ω–∏—è.")


if __name__ == '__main__':
    bot.infinity_polling()
